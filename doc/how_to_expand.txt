
首先说明一下各个文件的作用

whu-course-helper
	|
	|-const							-> 存放常量
	|	|-constants.py				-> 整个项目通用的一些常量，如回显开关(switch)之类的
	|	|-dict_keys.py				-> 所有字典的键，去除了hard coding
	|
	|-mod							-> 会用到的一些通用的类和函数
	|	|-config.py					-> config用到的键，和config的默认值，以及读取自定义的CONFIG文件的函数
	|	|-course_related.py			-> Course类和CourseSchedule类
	|	|-exceptions.py				-> 一些异常类
	|	|-fuf.py					-> 常用函数(Frequently Used Functions)
	|	|-google_calendar_proxy.py	-> 封装了gdata里操作日历的相关方法
	|	|-header_holder.py			-> 保存当前cookie的类，扩展某些学校可能用不到这个类
	|	|-serialize.py				-> 序列化课程（一般是MyCourse类）的相关方法
	|
	|-schools						-> 存放与对应学校有关的函数和类
	|	|-whu						-> 与武汉大学相关的类和函数
	|	|	|-CalendarAdapter.py	-> 使用GoogleCalendarProxy类来同步whu的课程
	|	|	|-constants.py			-> 存放与学校有关的常量
	|	|	|-parsers.py			-> 解析抓取下来的网页的相关函数
	|	|	|-spiders.py			-> 抓取页面的相关函数
	|	|	|-TableCreator.py		-> 生成课表的网页版
	|	|	|-whu.py				-> 杂项，如登陆登出的函数
	|
	|-CONFIG_SAMPLE					-> CONFIG文件的样例
	|-CourseCustomizer.py			-> 自定义课程所用到的函数
	|-README						-> 自述文档


1 一些习惯（这些习惯仅仅是建议，可以帮助写出风格一致的代码，便于阅读和维护）
	| 关于命名
		| 所有py文件内的方法和函数使用与Java一样的命名习惯，即类的命名是大驼峰式，常量的命名是全大写下划线分隔词，其他都是小驼峰（变量，函数，方法）;
		| 关于模块命名
			| 如果是会让用户直接接触的，用大驼峰命名，并且明确用途；
			| 如果只是辅助模块（不会让用户直接使用的），使用小写字母下划线分隔词的方式命名，并写明用途（可以是动词，可以是名词）
		| 关于包命名
			| 与辅助模块命名一样
			| 与学校有关的尽量用官方简写（比如学校官网的域名里用的），如果有重名情况，则后定义的学校写全称
	| 尽量将不同用途的函数分写到不同的模块中
		| 解析页面用的定义到名称与parser相近的文件中
		| 抓取页面用的定义到名称与spider相近的文件中
		| 与登入登出和一些杂项相关的定义到以学校名简写命名的文件中
	| 关于代码
		| 尽量抽取出常量，减少重复
		| 尽量写通用的(generic)函数，减少重复
		| 尽量写副作用(side-effect)小的函数（使用info函数不算），使程序的行为更清晰
		| 尽量多使用info函数，使得用户能知道当前程序运行的情况
		| 不断的重构，保持代码的清洁 :)
		| 字符串尽量使用unicode的，特别是操作带有中文字符的字符串时


"""请记住，如果有任何不清楚的，你总是可以阅读schools.whu包下的源码来获得灵感
schools.whu下的代码可能并不够好，但是也只有这些代码能给你一些指导了"""

2 抓取有课程信息的页面后，你应该解析这些信息并且放入MyCourse类的实例中
	根据course_related.py的74行，MyCourse是Course的子类，而Course类是list的子类，目的是让CourseSchedule类做Course类的元素
	也就是说添加一个CourseSchedule，你应该
		course.append(schedule)

	其他的课程属性，如名称，教师等，
		| 可以使用course.setProperty(key, data)
		| 可以先创建一个dict，按照key将data填入，最后course.setProperties(那个dict)
		| 也可以创建一个dict，按照key将data填入，最后course = MyCourse(那个dict)

	关于课程时间的解析，推荐的方法是按照目标学校给出的格式，写出正则表达式来匹配，然后放入CourseSchedule的实例中
	CourseSchedule实例其实就是dict实例，只不过重载了__unicode__和__str__方法，添加了一些其他的方法，所以使用起来应该是很简单的


3 写出目标学校的CalendarAdapter
	CalendarAdapter的作用就像schools.whu.CalendarAdapter.py里写的那样
		consumes courses of whu, and excrete dicts which GoogleCalendarProxy can understand
		吃入武大的课程，排出GoogleCalendarProxy能理解的dict对象

	为了将MyCourse应用于GoogleCalendarProxy，你应该将CourseSchedule转化为一个dict，
		d = {
			ACTUAL_START_TIME: 实际的开课时间，格式应该为YYYYmmddTHHMMSS 例如20120304T230500
			ACTUAL_END_TIME: 实际的结课时间，应该是一个unicode（str应该也行），格式应该为YYYYmmddTHHMMSS
			COUNT: 开课次数，应该是一个int
			FREQUENCY: 上课频率，例如每两周上一次，这个值就是2，应该是int
			BYDAY: 上课是哪一天，例如星期二，就是'TU'
			WHERE: 在哪里上课，请用unicode
		}

	把所有转化好的排课时间dict放入一个列表里，这里取名为consumedSchedules
	最后把课程转为dict（只提取出用得到的信息），比如
		whuCourse = {
			COURSE_NAME: course.getProperty(COURSE_NAME),
			TEACHER_NAME: course.getProperty(TEACHER_NAME),
			SCHEDULE: consumedSchedules
		}
	再把所有转化好的课程放入一个列表里，新建一个GoogleCalendarProxy实例，然后调用insertCourse就行了

4 如果你想利用config里的自动填入学号密码，GMail账号密码的功能，你应该在你的代码里使用fuf.getAccountInfo
	variable应该填入configs[key]，其中key按应用环境，应该是以下四个常量
		| CONFIG_KEY_STUDENT_ID
		| CONFIG_KEY_STUDENT_PWD
		| CONFIG_KEY_GMAIL_ACCOUNT
		| CONFIG_KEY_GMAIL_PWD
	之一，
	按应用环境，prompt应该是以下三个常量
		| ID_PROMPT
		| PASSWORD_PROMPT
		| GMAIL_PROMPT
	之一，
	在获取密码时应该使用密码模式

5 其他
	whu-course-helper使用盗版pycharm 2.0.2进行开发，
	pycharm 2.0.2对getpass的支持有问题，所以使用pycharm的同志在开发时应该将const.constants.py的switch['dbg']调为True
	这样whu-course-helper在跑的时候就不会用getpass，而是使用raw_input


6 changelog
	2012/3/4T23:28 指南 v0 待修订


all rights reserved
chsc4698@gmail.com

ps: 请尽量用vim看，notepad下显示得不太正常

